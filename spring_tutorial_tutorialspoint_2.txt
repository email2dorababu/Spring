%%%%%%%%%%%%%%%%%%%%%%%%%%%%
CHAPTER 9
Spring Bean Post Processors :
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Date 16thDec2014
Previous chapter we studied Initialization and destruction callback methods.
This chapter we study BeanPostProcessors.
BeanPostPorcessor - is an interface that defines callback methods - 
that you can implement to provide your own 
i) instantiation logic
ii)Dependency resolution logic etc.

You can also implement some custom logic after the spring container finished instantiating,configuring and initializing a bean
by plugging in one or more BeanPostProcessor implementations.

you can configure multiple BeanPostProcessors interfaces and you can control the order in which these BeanPostProcessor 
interfaces execute by setting - the "order" property.
This order property will be available when BPP implements "Ordered" interface.

BPP operate on bean(or object) instances, this means that the spring IoC container instantiates a bean instance and then
BPP interface is intantiated to do their work.

ApplicationContext automatically detects any beans that are defined with implementation of the BPP interface and
registers these beans as post-processors. and then these BPPs are called apprpriately by the container upon bean creation.

Example :
--------- 
pg 34:
InitHelloWorld implements BPP and have 2 methods : 
postProcessBeforeInitialization and PostProcessAfterInitialization returns Object(i.e Bean).
 you need to define this in configuration XML without any id etc.
 <bean class="com.tutorialspoint.InitHelloWorld" />
 
 Following is the content of the MainApp.java file. Here you need to register a shutdown "hookregisterShutdownHook()" method
 that is declared on the AbstractApplicationContext class. This will ensures a graceful shutdown and calls the relevant
 destroy methods.
 You can implement more complex logic before and after instantiating a bean because you have access on bean object inside both
 the post processor methods.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%
CHAPTER 10
Spring Bean Definition Inheritance :
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Date 16thDec2014
Here we will discuss Inheritance in Beans.

A bean definition contain a lot of configuration.
including 
constructor args, 
property values , 
container specific information such as 
   initialization method,
   static factory method name adn so on.

A child bean definition inherits configuration data from a parent definition.
A child definition can override some values, or add others as needed.

Here Spring Bean definition inheritane has nothing to do with Java class inheritance, but the inheritance concept is same.
You can define a parent bean definition as a template and other child beans can inherit reqired configuration from the prent
bean.














