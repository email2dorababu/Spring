###########################
Chapter 16
Spring Java Based Configuration:
###########################
pg 87 , Date 6Jan2015

Sofar we have seen how we configure Spring beans Using XML configuration file.
If you are confortable with XML configuration then it is really not required to learn how to proceed with java based 
configuration because you are going to achive the same result using either of the configuration available.

Java based configuration option enables you to write most of your Spring without XML but with the help of 
java-based annotations explained below.

@COnfiguration & @Bean Annotations :
------------------------------------
Annotating a class with the @COnfiguration indicates that the class can be used by the Spring IoC container as a source
of bean definitions.

THe @Bean Annotation tells Spring that a method annotated with @Bean will return an object that should be registred as a 
bean in the Spring application context.
E.G :

@Configuration 
public class HelloWorldConfig { 
  @Bean 
  public HelloWorld helloWorld(){
    return new HelloWorld(); 
  } 
}

THe above code will be equivalent to the following XML configuration:

<beans> 
  <bean id="helloWorld" class="com.tutorialspoint.HelloWorld" /> 
</beans>

Here method name annotated with @Bean works as bean ID and it creates and returns actual bean. 
your configuration calss can have declarations for more than one @Bean. 
Once you configuration classes are defined, you can load & provide them to spring container using 
AnnotatonCOnfigurationApplicationContext.

ApplicationContext ctx =new AnnotationConfigApplicationContext(HelloWorldConfig.class);
HelloWorld helloWorld = ctx.getBean(HelloWorld.class);

Injecting Bean Dependencies:
------------------------------
When @Beans have dependencies on one another, expressing that dependency is as simple as having 
one bean method calling another 

@Configuration 
public class AppConfig { 
@Bean 
  public Foo foo() { 
    return new Foo(bar());  // here we are doing a constructor injection.
  } 
  @Bean 
  public Bar bar() { 
  return new Bar(); 
} }

Here, the foo bean receives a reference to bar via constructor injection.

The @Import Annotation:
------------------------
this allows for loading @Bean definitions from another configuration class.
Consider a class ConfigA.
@Configuration 
  public class ConfigA { 
  @Bean
  public A a() { 
    return new A(); 
    } 
  }

You can import above bean declaration in another Bean Declaration as follows:
@Configuration 
@Import(ConfigA.class) 
public class ConfigB { 
  @Bean public B a() { 
    return new A(); 
    } 
  }

Now rather than needing to specify both ConfigA.class and ConfigB.class when instantiating the context, only ConfigB needs 
to be supplied.

LifeCycle CallBacks:
---------------------
The @Bean annotation supports specifying arbitrary initialization and destruction callback methods, much like Spring XML's
init-method and destroy-method attributes on the bean element.

@Bean(initMethod="init", destroyMethod="cleanup")
public Foo foo(){
  return new Foo();
}}

Specifying Bean Scope:
-------------------------
The default scope is singleton, but you can override with the @Scope annotation.
@Configuration
public class AppConfig{
  @Bean
  @Scope("prototype")
  public Foo foo(){
    return new Foo();
    }
  }
-------------------------------------

#################################
Chapter 17
Event Handling in Spring
#################################
pg:94
date 6Jan2014

COre of Spring is the ApplicationContext, which manages complete lifecycle of the beans.
Application context publishes certain types of events when loading the beans.
e.g ContextStartedEvent is published when the context is started and ContextStoppedEvent is published when the context is
stopped.

Event handling in the ApplicationContext is provided through the ApplicationEvent class and ApplicationListener interface.
So if a bean implements the ApplicationListener, then every time an ApplicationEvent get published to the ApplicationContext,
that bean is notified.

Spring provides the following standard events:
1. ContextRefreshedEvent: this event published when the ApplicationContext is either initialized or refreshed.
  This can also be raised using the refresh() method on the ConfigurableApplicationContext interface.
2. ContextStartedEvent: this event is published when the ApplicationContext is started using start() method on the 
  ConfigurableApplicationContext interface. You can poll your database or you can restart/start any stopped application 
  after receiving this event.
3. ContextStoppedEvent : this event is published when the ApplicationContext is stopped using the Stop() method on the 
  ConfigurableApplicationContext interface. you can do required housekeep work after receiving this event.
4. ContextClosedEvent: This event is published when the ApplicationContext is closed using the close() method on the 
  ConfigurableApplicationContext interface. A closed context reaches its end of life; it cannot be refreshed or restarted.
5. RequestHandledEvent: this is a web-specific event telling all beans that an HTTp request has been serviced.

-----------
Spring's event handling is single-threaded. so if an event is published, until and unless all the receivers get the message,
the processes are blocked and the flow will not continew. Hence care should be taken when desiging your application if event
handling is to be used.
------------

Listening to context events:
----------------------
pg 95
To listen a context event, a bean should implement the ApplicationListener interface which has just one method 
"onApplicationEvent()". 
Below is the example shows how the events propagates and how you can put your code to do required task based on events.













