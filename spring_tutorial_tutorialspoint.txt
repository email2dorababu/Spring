##################################'
Author:Dorababu G
Created Date: Nov 24 2014, 1:08AM

Last Updated Date:
Last Updated By:

Comments: This document is to intended as review/flash card for Spring Learning.
##################################

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Page 1: Chapter 1
Spring Framework Overview
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
what is spring?
Spring is 
the most popular 
application development 
framework 
for 
enterprise java.

Millions of developers use spring framework to create 
high performing
easily testable
reusable code.

Spring framework is an open source java platform and initially written by Rod Johnson and first released in june 2003.

It is light weight in size and transparent. Basic version of spring framework is around 2MB.

We can develop any java application with Spring Core and it's extensions.

********
Benefits:
********
1.We can develop enterprise-class application using POJOs.
Adv of POJOs is that you donot need an EJB container product such as application server, you can just use only a robust 
servlet container such as Tomcat or some commercial product.

2.Spring is organized in a modular fashion.you can take only those classes/packages which are substantial and ignore the rest.
3.You can reuse several ORM frameworks(hibernate),logging framework(log4j),JEE, Quartz and JDK timers, other view technologies.

4.Testing an application written using Spring is simple because
the environmental dependent code is moved into the Spring framework.
Also using JAVA-Bean style POJOs , it is easier to use dependency injection for injecting test data.

5.Spring framework is a well-defined web MVC framework.
It provides great alternative to web frameworks such as Struts or other less popular web frameworks.

6.Spring have a API to handle/translate technology specific exceptions(thrown by JDBC,Hibernate or JDBC for ex) into 
consistent, unchecked exceptions.(unchecked are run time errors and checked are compile time exceptions).

7.Ioc Container are lightweight compared to EJB container for example.This is beneficial for developing and deploying 
applications on computer with limited memory and CPU resources.

8.Spring provides a consistent transaction management interface that can scale down to a loacal transaction( incase of using 
a single database, for example) and scale up to global transactions(using JTA,for example)



********
Dependency Injection(DI):
********
DI technology is a flavor of IoC. Spring is most identified with this DI technology.
IOC is a general concept and it can be expressed in many different ways,DI is only one concrete example of inversion of 
control.

While writing a complex java application, appliation classes should be
i) as independent as possible of other java classes to increase the possibility of reuse these classes and 
ii) test them as independently of other classes in unit tesiting.

DI helps in gluing these classes together at the same time keeping them independent.

What is DI exactly?
Ex: class A is dependent on class B, this translates into Class B will get injected into Class A by IOC.
Dependency translates into an Association between two classes.

How dependency injection can happen?
one way is passong parameters to constructor or 
by post-construction using setter methods.

DI is heart of Spring framework.

********
Aspect Oriented Programming(AOP):
********
AOP framework is one of key component of Spring.

The functions that span multiple points of an appication are called Cross-cutting Concerns.
These Cross-cutting concerns are seperated from application's business logic.
AOP is a programming paradigm that aims to increasemodularity by allowing the separation of cross-cutting concerns.

Example for aspects including logging,declarative transactions, security and caching etc.

Here, class is the key unit of modularity in OOP,
aspect is the unit of modularity in AOP,
where as DI helps you decouple application objects from each other and 
AOP helps you decouple cross-cutting concerns from objects that they affect.

AOP module of spring framework provides AOP implementaiton , allows us to define method interceptors and 
pointcuts to clearly decouple code that implements functionality that should be separated.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Page 3: Chapter 2
Spring Framework Architecture
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Main building blocks of spring are called modules.

you can use Spring as one stop shop for all you enterprise applications.
however, Spring's Modularity allows you to pick and choose which modules are applicable to you and leave the rest.

Spring framework provides about 20 modules..
1.Core container
  i.Core   module -  provides fundamental parts of spring framework, including IOC & DI features.
  ii.Beans module - provides BeanFactory , which is sophisticated implementation of factory pattern.
  iii.Context - this module is a medium to access any objects defined and configured using Core and Beans modules. 
    Application Context Interface is the focal point of Context module.
  iv.Expression Language modules - provides powerful expression language for querying and manipulating an object graph at 
  runtime.
  -------------------
Date: Dec 4,2014
  ------------------
2.Data Access/Integration
  i.JDBC Module- provides JDBC abstraction layer that removes the need to do tedious JDBC related coding.
  ii.ORM module-provides integration layer for popular object relational mapping APIs including JPA,JDO,Hibernate and iBatis.
  iii.OXM module-provides abstration layer that supports Object/XML mapping implmentations for JAXB, Castor, XML Beans, 
  JiBX and XStream.
  iv. Java Messaging Service Module - contains features for producing and consuming messages.
  v. Transaction module - supports programmatic and declarative transaction mgmt for classes that implement special 
  interfaces and for all your POJOs.
3.Web (MVC/Remoting)
  i.Web Module - provides basic web-oriented integration features like, multipart file-upload functionality and 
  initialization  of IOC container using servlet listeners and Web-Oriented application context.
  ii. Web-Servlet module - contains Spring's MVC implementation for web applicaitons.
  iii. Web-Struts  - contains support classes for integrating a classic struts web tier within a Spring application.
  iv. Web-Portlet - provides the MVC implementation to be used in a portlet environment and mirrors the functinality of 
  web-servlet module.
4. Miscellaneous
  i.AOP module - provides AOP implementation to define method-interceptors and pointcuts to cleanly decouple the functinality 
  code, where these two are to be separated.
  ii. Aspects Module - provides integration with AspectJ , this AspectJ is a powerful and mature AOP framework.
  iii. Instrumentation module - provides class instrumentation support and class loader implementations to be used in certain 
  application servers.
  iv. Test module - supports testing of spring components with JUnit or TestNG frameworks.
  
  
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Page 13: Chapter 3
Spring Environment Setup
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Step 1 - Setup JDK
Set PATH(till bin) and JAVA_HOME(without bin)
Step 2 - Install Apache Common Logging API.
download from http://commons.apache.org/logging/ unzip the folder and set your classpath to this folder
Step 3- Setup Eclipase IDE.
Step 4- Setup Spring Framework Libraries
download from http://www.Springsource.org/download.
Unzip the zip file, you will find dist,projects and src folders.
You will find all the spring libraries in DIST directory. Set your class path to include this folder.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Page 17: Chapter 4
Spring Hello World Example
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  Step 1 - Create Java Project 
  File->New->Java Project, name HelloSpring
  Step 2 - Add Required Libraries
  Right click on your Project, goto Build Path->Configure Build Path -> Add Externa Jars under Libraries
  1.Add following Core Jars from Spring
  aop,asm,aspects,beans,context.support,context,core,expression
  2.Add Common Logging 
  commons-logging .jar
  3.Antlr-runtime .jar
  
  Step 3 - Create Source Files
    3.1 create package com.dora in src folder by new->Package
    Create HelloWorld.java and MainApp.java in the above com.dora package.
  Step 4 - Create Bean Configureation File
  Create Bean Configuration file which is an XML file that glues the beans i.e classes together.
  Note this need to be created under src directory(not inside the package).
  
  Step 5 - Run the program (RUn or use Ctrl + F11 ) to compile and run you MainApp application.
  -------------
  Explanation:
  1. First Step is to create application context where we use Spring framework API, ClassPathXmlApplicationContext().
  i.e we clreate ApplicationContext with the help of ClassPathXmlApplicationContext.
  This API loads beans configuration file , also 
  Creats and initializes all objects that are mentioned in the configuraton file.
  2. Second step is to get required bean using getBean() method that is created in in the context.
  The getBean() method uses BeanID to return a "generic Object" ,
    which finally can be casted to "actual object".
  Once you have object, you can call any of it's class methods.
  3. The Bean configuration file is an XML file, acts as cement that glues the beans/classes together.
    You can choose any name, but generally it is kept as "Beans.xml".
    You have to make sure that this file is available in CLASSPATH and use the same name in main application while creatting
    ApplicationContext shown in MainApp.java.
  
  Beans.xml is used to assign 
  i. unique IDs to different beans and 
  ii.Control the creation of objects with different values(i.e initialization of diff values to class variable via setters)
  without changing any of the Spring Source files.
  Here in this example, we can pass any value for "message" variable , so you can print diff values of message without 
  changing  HelloWorld.java and MainApp.java files.
  
  How it works? 
  When Spring application gets loaded into the memory, 
  Framework uses the configuration file to 
    i. create "All the beans" defined and 
    ii. assigns them unique ID as defined in <bean> tag.
    you can use <property> tag to "pass the values" of diff variables defined classes "at the time of bean creation".
  
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Page 23: Chapter 5
Spring IoC Containers
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Date:9Dec2014
Spring Container is the core of spring framework.
Spring container will 
1.create objects
2.wire objets together
3.configure objects
4.manage complete life cycle from creation till destruction.

Spring Container uses DI to manage the components that make up an application.
The Objets are called Spring Beans.

Q) from where the spring container gets its instruction on what objects
  i)to instantiate
  ii)Configure
  iii) and asssemble ?
A) Spring container reads the configuration metadata provided, and does all above actions.
  
Q) How many ways we can represent COnfiguration metadata?
A) i. Configuration metadata can be represented by XML,ii.Java Annotations,iii.Java code.

Spring container use i. Java POJO classess and ii.Configuration metadata to produce 
a fully configured and executable application/system, i.e ready to use application.


Containers provided by Spring - 2 distinct types:
1. Spring BeanFactory Container
2. Spring ApplicationContext Container

BeanFactory container is the simplest and provides basic support for DI defined by 
org.springframework.beans.factory.BeanFactory interface. this is still present in Spring for 
Backward compatibility with large no of 3rd party frameworks that integrate with spring.

ApplicationContext Container - adds more enterprise-specific functionality such as, 
  1.resolve textual msgs from properties file 
  2. ability to publish application events to interested event listeners.
Thi container is defined by org.springframework.context.ApplicationContext interface.

the AC container is generally recommended over BF container. BF can still be used for light weight applications like
mobile devices or applet based applications where data volume and speed is significant.

BeanFactory Example is skipped.
-----------------------------------------
SPRING APPLICATION CONTEXT CONTAINER:
-----------------------------------------
Page-26 :
 ApplicationContext is Spring's more advanced container. 
 Similar to BF, it can load bean definitions, wire beans together and 
     dispense(distribute or privide to no of ppl) upon request.
 Additionally it adds more enterprise-specific functionality(above said 2 points)
 this Container is defined by org.springframework.context.ApplicationContext interface.
 
 Q) what are the most commonly used application context implementations?
  i.FileSystemXmlApplicationContext- this container loads definitions of beans from XML file. Here you need to provide the
  full path of the XML bean configuration file to the constructor.
  ii.ClassPathXmlApplicationContext- this container loads the definitions of beans from an XML file.
    Here you donot need to provide the full path of the XML file, this container will look bean config XML file in CLASSPATH.
  iii. WebXmlApplicationContext- this container loads the XML file with definitions of all beans from within a web application.
  We will learn WebXmlApplicationContext whill discussing Web Based Spring Applications.
  
  pg 27:
  Steps in Main program of HelloWorld example.
  1. Create factory object i.e FileSystemXmlAC/ClassPathXmlAC/WebXmlAC by loading the bean configuration file from given path,
  The AC api takes care of creating and initializing all the objects i.e beans mentioned in the XML bean config file.
  2. Get required bean using getBean() method of the created context. 
    the getBean() method uses Bean ID to return a "generic object",
    finally we can cast the generic object to actual object.
    You can use this object to call any of its class methods.
Bean configuration file includes below,
 i. bean id , ii. Bean class, iii. bean properties, each property is name value pair.
 





  
  
  



