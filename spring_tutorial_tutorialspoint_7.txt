####################
Chapter 19
AOP with Spring Framework
###################
pg 101:

One of the key component of Spring framework is the Aspect Oriented programming AOP framework.

AOP entails breaking down program logic into distinct parts called concerns.
The functions that span multiple points of an application are called Cross-cutting concerns and these CCC are conceptually 
separate from application's business logic.

There are various common good examples of aspects like logging, Auditing ,Declarative transactions,Security, and Caching etc.

The key unit of modularity in OOP is the class, where as AOP the unit of modularity is the aspect. DI helps you decouple your
application objects from each other and AOP helps you decouple cross-cutting concerns from the objects that they affect.

AOP is like triggers in programming language such as perl, .NET, Java and others.

Spring AOP module provides interceptors to intercept an application, for example, when a method is executed, you can add 
extra functionality before or after the method execution.

AOP Terminologies:
--------------------
AOP concepts and terminology : These are not specific to Spring, rather they are related to AOP.
ASPECT : A module which has a set of APIs providing cross-cutting requirements. ex: a logging module would be called 
        AOP aspect for logging. An application can have any no of aspects depending on the requirement.
Joint Point: This represents a point in your application where you can plug-in AOP aspect. it is the actual place in the 
        application where an action will be taken using Spring AOP framework.
Advice:This is the actual action to be taken either before or after the method execution. This is actual piece of code that
        is invoked during program execution by Spring AOP framework.
PointCut: this is a set of one or more join points where an advice should be executed. You  can specify pointcuts using 
          expressions or patterns as we will see in our AOP examples.
Introduction : An introduction allows you to add new methods or attributes to existing classes.

Target Object: The Object being advised by one or more aspects, this object will always be a proxied object. Also referred to
              as the advised object.
Weaving : Weaving is the process of linking aspects with other application types or objects to create an advised object. This
          can be done at compile time, load time or at runtime.



























































































