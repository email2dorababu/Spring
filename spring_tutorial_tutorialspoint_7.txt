####################
Chapter 19
AOP with Spring Framework
###################
pg 101:

One of the key component of Spring framework is the Aspect Oriented programming AOP framework.

AOP entails breaking down program logic into distinct parts called concerns.
The functions that span multiple points of an application are called Cross-cutting concerns and these CCC are conceptually 
separate from application's business logic.

There are various common good examples of aspects like logging, Auditing ,Declarative transactions,Security, and Caching etc.

The key unit of modularity in OOP is the class, where as AOP the unit of modularity is the aspect. DI helps you decouple your
application objects from each other and AOP helps you decouple cross-cutting concerns from the objects that they affect.

AOP is like triggers in programming language such as perl, .NET, Java and others.

Spring AOP module provides interceptors to intercept an application, for example, when a method is executed, you can add 
extra functionality before or after the method execution.

AOP Terminologies:
--------------------
AOP concepts and terminology : These are not specific to Spring, rather they are related to AOP.
ASPECT : A module which has a set of APIs providing cross-cutting requirements. ex: a logging module would be called 
        AOP aspect for logging. An application can have any no of aspects depending on the requirement.
Joint Point: This represents a point in your application where you can plug-in AOP aspect. it is the actual place in the 
        application where an action will be taken using Spring AOP framework.
Advice:This is the actual action to be taken either before or after the method execution. This is actual piece of code that
        is invoked during program execution by Spring AOP framework.
PointCut: this is a set of one or more join points where an advice should be executed. You  can specify pointcuts using 
          expressions or patterns as we will see in our AOP examples.
Introduction : An introduction allows you to add new methods or attributes to existing classes.

Target Object: The Object being advised by one or more aspects, this object will always be a proxied object. Also referred to
              as the advised object.
Weaving : Weaving is the process of linking aspects with other application types or objects to create an advised object. This
          can be done at compile time, load time or at runtime.

Types of Advice:
-------------------
Spring aspects can work with five kinds of advice mentioned below: 
Advice- Description 
before: Run advice before the a method execution. 
after :Run advice after the a method execution regardless of its outcome. 
after-returning :Run advice after the a method execution only if method completes successfully. 
after-throwing :Run advice after the a method execution only if method exits by throwing an exception. 
around : Run advice before and after the advised method is invoked.


Custom Aspects Implementation:
------------------------------
Spring supports the @AspectJ annotation style approach and the schema-based approach to implement custom aspects. 
These two approaches have been explained in detail in the following two sub chapters 
Approach- Description:
XML Schema based:  Aspects are implemented using regular classes along with XML based configuration. 
@AspectJ based : @AspectJ refers to a style of declaring aspects as regular Java classes annotated with Java 5 annotations.

XML Schema Based AOP with Spring:
-------------------------------
To use the aop namespace tags described in this section, you need to import the spring-aop schema as described below: 

<?xml version="1.0" encoding="UTF-8"?> 
        <beans xmlns="http://www.springframework.org/schema/beans" 
                xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
                xmlns:aop="http://www.springframework.org/schema/aop" 
                xsi:schemaLocation="http://www.springframework.org/schema/beans 
                http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
                http://www.springframework.org/schema/aop 
                http://www.springframework.org/schema/aop/spring-aop-3.0.xsd "> 
        <!-- bean definition & AOP specific configuration --> 
        </beans>

You will also need following Aspect J libraries on the CLASSPATH of your application.
These are available in lib directory of an AspectJ installation. else you can download from internet.
1. Aspectjrt.jar
2. Aspectjweaver.jar
3. aspectj.jar

Declaring an aspect:
------------------------
An aspect is declared using the <aop:aspect> element, and the backing bean is referenced using the ref attribute:
<aop:config>
        <aop:aspect id="myAspect" ref="aBean">
        ...
        </aop:aspect>
</aop:config>

<bean id="aBean" class="...">
...
</bean>

Heare aBean will be configured and dependency injected just like any other Spring bean.

Declaring a pointcut:
--------------------
 A point cut helps in determing the join point(i.e methods) of interest to be executed with different advices.
 While working with XML schema based configuration, pointcut will be defined as follows:
<aop:aspect id="myAspect" ref="aBean"> 
        <aop:pointcut id="businessService" 
                expression="execution(* com.xyz.myapp.service.*.*(..))"/>
        ... 
</aop:aspect>

The following example defines a pointcut named 'businessService' that will match the execution of getName() method available 
in Student class under the package com.tutorialspoint:

<aop:aspect id="myAspect" ref="aBean"> 
        <aop:pointcut id="businessService" 
                expression="execution(* com.tutorialspoint.Student.getName(..))"/>
        ... 
        </aop:aspect>

Declaring Advices:
------------------------
you can declare any of the five advices inside an <aop:aspect> using the <aop:{ADVICE NAME}> element .


<aop:config> 
        <aop:aspect id="myAspect" ref="aBean"> 
                <aop:pointcut id="businessService" expression="execution(* com.xyz.myapp.service.*.*(..))"/> 
                <!-- a before advice definition --> 
                <aop:before pointcut-ref="businessService" method="doRequiredTask"/> 
                <!-- an after advice definition --> 
                <aop:after pointcut-ref="businessService" method="doRequiredTask"/>
                ....
                
        </aop:aspect> 
</aop:config>                

You can use same doRequiredTask or different methods for different advices. These methods will be defined as a part of 
aspect module
------------------------------------------------
@AspectJ Based AOP with Spring:
------------------------------
@AspectJ refers to a style of declaring aspects as regular java classes annotated with Java 5 annotations.
The @AspectJ support is enabled by including the following element inside your XML schema-based configuration file.

<aop:aspectj-autoproxy/>

You need to have the blwo aspectJ libraries on your classpath of your application.
1. Aspectjrt.jar
2. Aspectjweaver.jar
3. aspectj.jar

Declaring an Aspect:
-------------------
Aspect classes are like any other normal bean and may have methods and fields just like any other class, except that
they will be annotated with @Aspect as follows:

package org.xyz; 
import org.aspectj.lang.annotation.Aspect; 

@Aspect 
public class AspectModule { }

They will be configured in XML like any other bean as follows:

<bean id="myAspect" class="org.xyz.AspectModule"> 
        <!-- configure properties of aspect here as normal --> 
</bean>

Declaring a pointcut:
------------------------
A pointcut helps in determining the join i.e methods of interest to be executed with different advices. While working
with @AspectJ based configuration, pointcut declaration has two parts:
        1. A pointcut expression that determines exactly which method executions we are interested in
        2. A pointcut signature comprising a name and any number of parameters. The actual body of the method is 
                irrelevant and infact should be empty.
The following example defines a pointcut named 'businessService' that will match the execution of every method 
available in the classes under the package com.xyz.myapp.service:


import org.aspectj.lang.annotation.Pointcut; 

@Pointcut("execution(* com.xyz.myapp.service.*.*(..))") // expression 

private void businessService() {} // signature 


The following example defines a pointcut named 'getname' that will match the execution of getName() method available 
in Student class under the package com.tutorialspoint: 

import org.aspectj.lang.annotation.Pointcut;
@Pointcut("execution(* com.tutorialspoint.Student.getName(..))") 
private void getname() {}

Declaring advices :
--------------------
You can declare any of the five advices using @{ADVICE-NAME} annotations as given below.
This assumes that you already have defined a pointcut signature method businessService():


@AfterReturning(pointcut = "businessService()", returning="retVal") 
public void doAfterReturnningTask(Object retVal){ 
        // you can intercept retVal here. 
        ... 
} 

@AfterThrowing(pointcut = "businessService()", throwing="ex") 
public void doAfterThrowingTask(Exception ex){
        // you can intercept thrown exception here.
        ... 
        } 

@Around("businessService()") 
public void doAroundTask(){ 
        ... 
}
You can define you pointcut inline for any of the advices. Below is an example to define inline pointcut for before advice: 

@Before("execution(* com.xyz.myapp.service.*.*(..))") 
public doBeforeTask(){ 
        ...
}



























































