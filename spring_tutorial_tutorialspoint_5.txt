############################
Chapter 15
Spring Annotation Based Configuration:
###########################
Page 73
Date 2Jan2015
Starting from Spring 2.5 it became possible to configure the DI using Annotations.
So instead of using XML to describe a bean wiring, you can move the bean configuration into the "component" class itself,
using annotations on the relecant class, method, or field declaration.

NOTE: Annotation injection is performed before XML injection, thus the latter configuration will override the former for
properties wired through both approaches.

Annotation wiring is not turned on in spring container by default.
So we need to enable it in our spring configuration file for annotation based wiring.

use the below line as the first line inside the <beans> tag.
 
 <beans xmlns=.....      ...>
   <context:annotation-config/>
  </beans>
  
once <context:annotation-config> is configured, you can start annotating your code, spring automatically wire values into
properties, methods, and constructors.

Few IMP annotations:
---------------------------
1. @Required : the @Required annotations applied to bean property setter methods.
2. @Autowired : this annotation can be applied to bean property setter methods, non-setter methods, constructor and 
properties.
3. @Qualifier :annotation along with @Autowired can be used to remove the confusion by specifying which exact bean will be 
wired
4. @JSR-250Annotations: spring supports JSR-250 based annotations which include @Resource, @PostConstruct and @PreDestroy.

@REQUIRED ANNOTATION:
------------------------
 this applies to bean property setter method and it indicates that the affected bean property must be populated in XML
 configuration file at configuration time , otherwise the container throws a BeanInitialization exception.

@AUTOWIRED ANNOATION:
------------------------
This annotation provides more fine-grained control over where and how autowiring should be accomplished. 
The @Autowired annotation can be used to autowire bean on the setter method is just like @Required annotation, Constructor,
a property or methods with arbitrary names and/or multiple arguments.
 
 @Autowired on Setter Methods: you can use @Autowired annotation on setter methods to get rid of the <property> element in XML configuration file.
  When Spring finds this annotation used with setter methods, it tries to perform byType autowiring on the method.
  
@Autowired on Properties: you can use @Autowired annotation on properties to get rid of the setter methods.
when you will pass values of autowired properties using <property> ,Spring will automatically assign those properties with 
the passed values or references. 

@Autowired on COnstructors: you can apply @Autowired to constructors as well. A Constructor @Autowired annotation indicates 
that the constructor should be autowired when creating the bean, even if no <constructor-arg> elements are used while configuring the bean in XML file.

@Autowired with (required=false) option:: 
----------------------------------------
Date 6Jan2014
pg 80
 By default @Autowired annotated implies the dependency is required , similar to @Required annotation.
 However, you can turn off the default behavior by using (required-false) option with @Autowired.
 
 e.g.Even if u don't pass any value for age property the program works 
 @Autowired(required=false) 
 public void setAge(Integer age) { 
  this.age = age; 
 }
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

