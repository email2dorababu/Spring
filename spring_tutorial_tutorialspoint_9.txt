###########################
Chapter 21
Spring Transaction Management
###########################
A Database transaction is a sequence of actions that are treated as a single unit of work.
These actions should either complete entirely or take no effect at all.
Transaction management is an imp part of RDBMS oriented enterprise applications to ensure data integrity and Consistency.

Four Key properties of transactioins is described as ACID:
1.Atomicity: A transaction should be treated as a single unit of operation. Means either the entier sequence of operations is
successful or unsuccesful
2.Consistency: Represetns the consistency of the referential integrity of the database, Unique primary keys in tables etc.
3.Isolation: There may be many transactions with the same data set at the same time, each transaction should be isolated from
others to prevent data corruption.
4. Durability: Once a transaction has completed, the results of this trasaction have to be made permanent and cannot be 
erased from the database due to system failure.

A real RDBMS will guarantee all the four properties for each transaction. 
The Trasaction is viewd in a simple manner as :
1. Begin the transaction using begin transaction command.
2. Perform various deleted, update or insert operations using SQL queries.
3. If all the operations are successful then perform commit otherwise rollback all the operations.

Spring's transaction support aims to provide an alternative to EJB transactions by adding transaction capabilities to POJOS.

Spring supports both Programmatic and declarative transaction management.
EJB Requires an application server, but Spring transaction management can be implemented without need of application server.

Local vs Global Transactions:
----------------------------
Local Transactions are specific to a single transactional resource like a JDBC connection.
where as Global transactions can span multiple transactional resources like transaction in a distributed system.

Local Transaction management can be useful in a centralized computing environment where application components and resources
are located at a single site, and transaction mgmt only involves a local data manager running on a single machine.
Local transactions are easier to be implemented.

Global transaction mgmt is required in a distributed computing environment where all the resources are distributed across
multiple systems. In such case, trasaction mgmt needs to be done both at local and global levels.
A distributed or global transaction is executed across multiple systes, and its execution requires coordination between the 
global transaction mgmt system and all the local data managers of the involved systems.

Programmatic vs Declarative:
-----------------------------
Spring supports above two types of transaction management.

1.Programmatic transaction management: means that you have managed the transaction with the help of programming. this gives
you extreme flexibility, but it is difficult to maintain.
2. Declarative transaction management: Means you separate transaction management from the business code. You only use 
annotations or XML based configuration to manage transactions.

Declarative transaction mgmt is preferable over programmatic transaction management. Eventhough Decalrative tx mgmt is less 
flexible than the programmatic tx mgmt which allows you to control transaction through your code.

But as a kind of crosscutting concern, declarative transaction mgmt can be modularized with the AOP approach.

Spring support declarative transaction mgmt through the Spring AOP framework.

Spring Transaction Abstractions:
-------------------------------
pg 130:
The key to the spring transaction abstraction is defined by the 
org.springframework.transaction.PlatformTransactionManager interface.

public interface PlatformTransactionManager { 
  TransactionStatus getTransaction(TransactionDefinition definition) throws TransactionException; 
  void commit(TransactionStatus status) throws TransactionException; 
  void rollback(TransactionStatus status) throws TransactionException; 
  }
getTransaction - returns a currently active transaction or create a new one according to the specified propagation behavior.
Commit - Commits the given transaction, with regard to its status.
Rollback - Performs a rollback of the given transaction.

The TransactionDefinition is the core interface of the transaction support in Spring and it is defined as below: 

public interface TransactionDefinition { 
    int getPropagationBehavior();  - returns the propagation behavior (similar options from EJB CMT)
    int getIsolationLevel();  - returns the degree to which this transaction is isolated from the work of other txs.
    String getName(); - returns the name of this transaction
    int getTimeout(); -returns the time in seconds in which the transaction must complete
    boolean isReadOnly(); - returns whether the transaction is read-only
  }

Possible values for isolation level:
1.Isolation_default - default isolation level
2.Isolation_read_commited - indicates that dirty reads are prevented, non-repeatable and phantom reads can occur.
3.Isolation_read_uncommitted.-indicates dirty reads,non-repeatable and phantom reads can occur.
4.Isolation_repeatable_read -Indicates dirty reads,non-repeatable reads are prevented, ohantom reads can occur.
5.Isolation_serializable - indicates dirty reads,non repeatable reads and phantom reads are prevented.

Following are possible values for propagation types:
1.Propagation_mandatory - supports current transaction, throws exception if no current transaction exists.
2.Propagation_nested - execute within a nested transaction if a curent transaction exists.
3.Propagation_never - throws an exception if a current transaction exists.
4.Propagation_not_supported - Do not support a current transaction , rather always execute non-transactionally.
5.Propagation_required - support a current transaction; create a new one if none exists.
6.Propagatopon_requires_new
7.Propagation_supports
8.Timeout_default

PG 132 : TransactionStatus interface read more

Programmatic Transaction Management
-----------------------------------
Programmatic transaction management approach allows you to manage the transaction with the help of programmng in your source
code. this gives you extreme flexibility, but it is difficult to maintain.
EXAMPLE

pg 138: Declarative Transacton management:
-----------------------------------------
this declarative transaction management approach allows you to manaage the transaction with the help of configuration insted
of hard conding in your source code. This means that you can separate transaction managemnt from the business code.
You only use annotations of XML based configuration to manage the transactions. The bean configuration will specify the 
methods to be transactional. The belw are the steps associated with declarative transaction:
1. We use <tx:advice /> tag. which creates a transaction-handling Advice and same time we define a pointcut that matches all 
methods we wish to make transacitonal and reference the transactional advice.
2. If a method name has been included in the trasactional cofiguration then created advice will begin the transaction before
calling the method
3.Target method will be executed in a try/catch block
4. If the method finishes normally , the SOP advice commits the transaction succesfully otherwise it performs a rollback.
