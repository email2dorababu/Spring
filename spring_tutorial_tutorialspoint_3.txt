%%%%%%%%%%%%%%%%%%%%%%%%%%%%
CHAPTER 11
Spring Dependency Injection
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Date 18thDec2014
page 41

Every Java based application has a few objects that work together , makes a working application, which end user sees/uses.
When writing a complex java application, application classes should be 
as independent as possible of other java classes to
    increase the reuse of these classes and 
    to test them independently of other classes while doing the unit testing.
    
Dependency injection (or sometimes called wiring) helps in gluing these classes together also keeps them independent.

Example :
public class TextEditor { 
  private SpellChecker spellChecker; 
  public TextEditor() { 
    spellChecker = new SpellChecker(); 
  } 
}
Here in this code, we have created a dependency between the TextEditor and the SpellChecker.

Incase of Inversion co Control scenario, we would do like..
public class TextEditor { 
  private SpellChecker spellChecker; 
  public TextEditor(SpellChecker spellChecker) { 
    this.spellChecker = spellChecker;
  } 
}

Here TextEditor should not worry about spellChecker implementation. The SpellChecker will be implmented independently and 
and provided to TextEditor at the time of TextEditor instantiation and this entire procedure is controlled by the 
Spring Framework.

Here we have removed the total control from TextEditor and kept it in elsewhere(i.e XML configuration file) and the 
dependency(i.e the class SpellChecker) is being injected into the class TextEditor through a "class Constructor".
Thus flow of control has been "inverted" by Dependency Injection(DI), because you have effectively deligated dependancies
to some external system.

The first method is Constructor based dependency injection.
Constructor-based dependency injection:
---------------------------------------
Constructor-based DI is accomplished when the container invokes a class constructor with a number of arguments, 
each representing a dependency on other class.

Second Method is injecting dependencies through "Setter methods" of TextEditor class.
Here we will create spellChecker instance and this instance is used to call setter methods to initialize 
TextEditors properties. 
Setter-based dependency injection:
----------------------------------
Setter-based DI is accomplished by the container calling setter methods on your beans 
after invoking a "no-argument constructor"  or "no-argument static factory method" to instantiate your bean.

NOTE: you can mix both constructor and setter based DI. But a good rule of thumb is to use
Constructor arguments for MANDATORY dependencies and,
Setters for optional dependencies.

Benefits of DI: page 42:
-----------------------
Code is cleaner with the DI principle.
decoupling is more effective when objects are provided with their dependencies.
The object does not lookup its dependencies, and 
does not know the location or class of the dependencies.
Everything (this lookup etc) is taken care by the Spring Framework.

Constructor-based Dependency Injection:
---------------------------------------
date 19Dec2014
Constructor-based DI is accomplished when 
    the container invokes a "class constructor with a no of arguments", each argument representing a dependency on 
    other class.
Example: pg 43
1. Text editor have a constructor, with SpellChecker as an argument.
public TextEditor(SpellChecker spellChecker) { 
    System.out.println("Inside TextEditor constructor." ); 
    this.spellChecker = spellChecker; 
}

In Main class:
TextEditor te = (TextEditor) context.getBean("textEditor");

In the Beans.xml configuration file:
<!-- Definition for textEditor bean --> 
    <bean id="textEditor" class="com.tutorialspoint.TextEditor"> 
        <constructor-arg ref="spellChecker"/> 
    </bean> 
<!-- Definition for spellChecker bean --> 
    <bean id="spellChecker" class="com.tutorialspoint.SpellChecker"> 
    </bean>

I.E the constructor based DI is implemented using  <constructor-arg ref="spellChecker"/>  tag.

Note: The above is the case where there is only one argument is present in the constructor.
How does the constructor arguments are resolved when there is morethan one argument in the constructor?

Constructor arguments resolution:
---------------------------------
There will be ambiguity while passing arguments to constroctor , when there are more than one parameter.

We can resolve the ambiguity in the following ways.
1 method. Supply the arguements to constructor in the same order , in which construcotr-arg are defnined in bean definition.
public Foo(Bar bar,Baz bax){
//...
}

Bean configuration file :
<beans>
    <bean id="foo" class="x.y.Foo"> 
        <constructor-arg ref="bar"/> 
        <constructor-arg ref="baz"/>
    </bean> 
    <bean id="bar" class="x.y.Bar"/> 
    <bean id="baz" class="x.y.Baz"/> 
</beans>

2 method. When we pass different types to constructor, like public Foo(int year, String name),
the container can also uses type matching with "SIMPLE TYPES" ,"if you explicitly specify the type" of the constructor args
using the "TYPE" attribute. Ex:
<bean id="exampleBean" class="examples.ExampleBean"> 
    <constructor-arg type="int" value="2001"/> 
    <constructor-arg type="java.lang.String" value="Zara"/> 
</bean>

3 method. THe best way is to pass the constructor arguments, use the "INDEX" attribute to specify explicitly the index of
constructor arguments. Here the index is "0" based.
<bean id="exampleBean" class="examples.ExampleBean"> 
    <constructor-arg index="0" value="2001"/> 
    <constructor-arg index="1" value="Zara"/> 
</bean>

----------------------
Final Note
---------------------
Incase you are passing a reference to an object, you need to use "REF" attribute of <construcotr-arg> tag.
If you are passing a value directly then you should use "VALUE" attribute.

 <bean id="foo" class="x.y.Foo"> 
        <constructor-arg ref="bar"/> 
        <constructor-arg ref="baz"/>
    </bean> 
    <bean id="bar" class="x.y.Bar"/> 
<bean id="baz" class="x.y.Baz"/>
--
<bean id="exampleBean" class="examples.ExampleBean"> 
    <constructor-arg type="int" value="2001"/> 
    <constructor-arg type="java.lang.String" value="Zara"/> 
</bean>
-------------------------------
Page 45:
----------------------------------
Setter-based Dependency Injection:
---------------------------------








