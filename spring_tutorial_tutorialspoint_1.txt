%%%%%%%%%%%%%%%%%%%%%%%%%%%%
CHAPTER 6
Spring Bean Definition
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Date 12thDec2014

Beans are the objects that form the backbone of your application. 
the objects(called Beans) are managed by the Spring IOC container.

A Bean is an object that is instantiated, assembled, and managed by Spring IOC container.

These Beans are created with the configuration metadata supplied to the container in the form of <bean/> definitions.

Bean definition contains the information called - Configuration Metadata
This configuration metata data is needed for container to know the following.
1)how to create a bean
2)Bean's lifecycle details
3)Bean's dependencies

Configuration Metadata translates into below set of properties that forms bean definition.
Properties - Description
1.Class    - Mandatory attribute, specifies the bean class to be used to create the bean.
2.Name     - Specifies the bean unique identifier. In XML based configuration , you use ID/NAME attribute to specify the bean 
identifier.
3.Scope    - Specifies the scope of the objects created from a bean definition.
4.Constructor-arg -this is used to inject the dependencies 
5.Properties  - This is used to inject the dependencies
6.Autowiring Mode - This is used to inject the dependencies.
7.Lazy-Initialization mode - A Lazy initialized bean tells the IOC container -
  - to create a bean instance when it is first requested, instead of creating it at startup.
8.Initialization method - A callback to be called just after all necessary properties on the bean have been set by the 
container.
9.destruction method - A call back to be used when the container containing bean is destroyed.
-----------------------------------------

Spring Configuration Metadata :    Spring IOC container is totally decoupled from the FORMAT in which the confuguration-
---------------------------------
- metadadata is actually written. 
Below are the important methods to provide configuration metadata to Spring Container-
1. XML based configuration file.
2. Annotation based configuation
3. Java-based configuration
-----
Example 
<!-- A simple bean definition -->
  <bean id="..." class="..."> 
  <!-- Configuration & collaborators for this bean go here -->
  </bean>
<!-- Bean def with lazy init set on -->
  <bean id="..." class="..."  lazy-init="true"> 
  <!-- Configuration & collaborators for this bean go here -->
  </bean>
<!-- Bean def with initialization method -->
  <bean id="..." class="..."  init-method="..."> 
  <!-- Configuration & collaborators for this bean go here -->
  </bean>
<!-- Bean def with destruction method -->
  <bean id="..." class="..."  destroy-method="..."> 
  <!-- Configuration & collaborators for this bean go here -->
  </bean>

%%%%%%%%%%%%%%%%%%%%%%%%%%%%
CHAPTER 7
Spring Bean Scopes
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Date 12thDec2014

In <bean> definition of spring, you can declare SCOPE for that bean.
Spring framework supports FIVE scopes. THREE of which are available only if you use a web-aware ApplicationContext.
SCOPE - Description:
1.Singleton - this scopes the bean definition to a single instance per Spring IOC container(default).
2.Prototype - This scopes the bean definition to have any no of object instances.
3.request - This scopes a bean def to an HTTP request. Only valid in the context of a web-aware spring ApplicationContext.
4.Session - This scopes a bean def to an HTTP Session. Only valid in the context of a web-aware spring ApplicationContext.
5.Global Session - This scopes a bean def to a global HTTP Session. Only valid in the context of a 
web-aware spring ApplicationContext.

1. SINGLETON SCOPE :
------------------------
If scope is set to Singleton- the Spring IOC container creates exactly one instance of the object defined by bean definition.
This Single instance is stored in a cache of such singleton beans, and all subsequent requests and referenes for that named
bean return the cached object.
The default scope is always singleton. However, if you need one and only one instance of a bean, you set the scope
properly to singleton in the bean configuration file.
<bean id="..." class="..." scope="singleton"> <!-- configuration --> </bean>

Example on Page 33:

2. PROTOTYPE SCOPE :
------------------------
If scope is set to prototype, the Spring IoC container creates a new bean instance of the object everytime a request for 
that specific bean is made. 
######################
NOTE: As a rule, use the prototype scope for all State-full beans and singleton scope for stateless beans.
######################



%%%%%%%%%%%%%%%%%%%%%%%%%%%%
CHAPTER 8
Spring Bean Life Cycle
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Date 12thDec2014

The life cycle of a Spring bean is easy to understand.

WHen a bean is instantiated, it may be required to perform some initialization to get it into a usable state.
Similarly when the bean is no longer required, some clean up may be required while the container removes the bean.

There is list of activities that takes place behind the scenes between instantiation and its destruction of a bean.
We will discuss only two important bean lifecycle callback methods-
1.Initialization callbacks
2.Destruction callbacks

To setup these methods, we simply declare the <bean> with init-method and destroy-method parameters.
init-method specifies a method that is to be called on the bean "immediately upon instantiation".
similarly destroy-method specifies a method that is called "just before a bean is removed" from the container.

Initialization callbacks :
--------------------------
Here you can do two types of initialization callbacks.
1. implement afterPropertiesSet() method in org.springfamework.beans.factory.initializingBean interface.
in this interface has a single method - 
void afterPropertiesSet() throws Exception;

You can simply implement above interface and initializtion work canbe  done inside afterPropertiesSet() method.
Public class ExampleBean implements InitializationBean{
  public void afterPropertiesSet(){
    // do some initialization work
  }
}



















