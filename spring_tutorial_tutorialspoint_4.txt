#################################
Chapter 12
Spring Injecting Inner Beans
#################################
pg 56:
date: 24Dec2014
Java inner classes are defined within the scope of other classes.
Similarly  inner beans are beans that are defined within the scope of another bean.

Thus, a <bean/> element inside the <property/> or <constructor-arg/> element is called inner bean.
The below is setter-based injection but using inner beans:
<bean id="outerBean" class="..."> 
  <property name="target"> 
  -- setter-based injection but using inner beans:
    <bean id="innerBean" class="..."/> 
  </property> 
</bean>

#################################
Chapter 13
Spring Injecting Collection
#################################
pg 59:

You can configure primitive data type using VALUE attribute and object references using REF attribute of the <property> tag
in your Bean configuration file. Here in both the cases you deal with passing singular value to a bean.

Now what about if you want to pass plural values like Java Collection types List,SET,MAP and Properties.

To handle the situation Spring offers you FOUR types of collection configuration elements :
<LIST> - this helps in wiring i.e injecting a list of values, allowing duplicates.
<SET> -   this helps in wiring i.e injecting a set of values, but without any duplicates.
<MAP> - this can be used to inject a collection of name-value pairs where name and value can be of any type.
<PROPS> - used to inject a collection of name-value pairs where the name and value are both strings.

You can use either <list> or <Set> to wire ANY implementation of java.util.Collection or an ARRAY.

You will come across two situations
a) Passing direct values of the collecton and 
b) Passing a reference of a bean as one of the collection elements.


<list> 
<value>INDIA</value> 
<value>USA</value>
</list>
<set> 
  <value>INDIA</value> 
  <value>USA</value> 
  <value>USA</value> 
</set>
<map>
  <entry key="1" value="NDIA"/> 
  <entry key="2" value="Pakistan"/> 
  <entry key="3" value="USA"/> 
  <entry key="4" value="USA"/> 
</map>
<props> 
  <prop key="one">INDIA</prop> 
  <prop key="two">Pakistan</prop> 
  <prop key="three">USA</prop> 
  <prop key="four">USA</prop> 
</props>

-----------------------
The above is injecting direct values of the collection, and now let us see injecting Bean REFERENCES:
Here you can mix references and values all together.

<list> 
  <ref bean="address1"/> 
  <ref bean="address2"/> 
  <value>Pakistan</value>
</list> 
<map> 
  <entry key="one" value="NDIA"/> 
  <entry key ="two" value-ref="address1"/> 
  <entry key ="three" value-ref="address2"/> 
</map>

To use above bean definition, you need to define your setter methods in such a way that they should be able to handle 
referenes as well.
--------------
Injecting NULL and empty string values:
Empty string is passed by
<bean id="..." class="exampleBean"> 
  <property name="email" value=""/> 
</bean>

The above example is equal to exampleBean.setEmail("").
To pass NULL values , pass it as follows.
<bean id="..." class="exampleBean"> 
  <property name="email"><null/>  </property> 
</bean>
it is equivalanet to java code, exampleBean.setEmail(null);

#################################
Chapter 14
Spring Beans Auto-Wiring
#################################
pg 64:

you have learnt how to declare a bean using <bean> element and inject <bean> with using <constructor-arg> and 
<property> element in XML configuration file.

Spring container can AUTOWIRE relationships between collaborating beans without using <constructor-arg> and 
<property> elements,
(what is the use of Auto wiring )
(NOTE) which helps cut down on the amount of XML configuration you write for a big Spring based application.
--------------------
Autowirng Modes:
The autowiring modes can be used to instruct Spring container to use autowiring for dependency injection.
you use the AUTOWIRE attribute of the <bean/> element to specify qutowire mode for a bean definition.

Mode - description
NO - default setting , means no autowiring and you should use explicit bean reference for wiring.(learned in prev chapters).
byName - Autowire by property name. Spring container looks at the properties of the beans on which AUTOWIRE attribute is 
          set to byName in the XML config file. it then tries to match and wire its properties with the beans definition by
          the same names in the configuration file.
byType - Autowire by property data type. Spring container looks at the properties of the beans on which autowire attribute is
         set to byType in the XML config file. It then tries to match and wire a property if its TYPE matches with exactly
         one of the beans name in configuration file. If more than one such bean exists, a fatal exception is thrown.
constructor - Similar to byType, but Type applies to constructor arguements. if there is not exactly one bean of the 
              constructor arguement type in the container, a fatal error is raised.
Autodetect -  Spring first tries to wire using autowire by constructor, if it does not work, Spring tries to autowire byType

Note: you can use byType or constructor autowire mode to wire arrays and other typed-collections.
--------------
limitations with autowiring:























